{"version":3,"sources":["components/Favorites/Favorites.module.css","components/Favorites/Favorites.js","actions/index.js","components/Buscador/Buscador.js","components/NavBar/NavBar.js","components/Movie/Movie.js","App.js","serviceWorker.js","reducers/index.js","store/index.js","index.js"],"names":["module","exports","ConnectedList","className","styles","titleBuscador","container","this","props","movies","moviesFavourites","map","movie","movieItem","title","btn","onClick","removeMovieFavorite","id","Component","connect","state","dispatch","type","payload","Buscador","event","setState","target","value","preventDefault","getMovies","console","log","onSubmit","e","handleSubmit","htmlFor","autoComplete","onChange","handleChange","favMovies","filter","fav","imdbID","length","src","Poster","alt","to","Title","addMovieFavorite","moviesLoaded","titulo","fetch","then","response","json","NavBar","exact","Movie","movieId","match","params","getMovieDetail","movieDetail","style","color","href","Plot","Director","Genre","Actors","Awars","Production","Language","React","idMovie","App","Fragment","path","component","Favorites","Boolean","window","location","hostname","initialState","rootReducer","action","concat","Search","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a5a48049.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"cnt\":\"Favorites_cnt__3IMTf\",\"movieItem\":\"Favorites_movieItem__2TN1L\",\"titleBuscador\":\"Favorites_titleBuscador__2424V\",\"container\":\"Favorites_container__14I-C\",\"btn\":\"Favorites_btn__1PZ4e\"};","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n// import './Favorites.css';\r\nimport {removeMovieFavorite} from '../../actions/index.js'\r\nimport styles from './Favorites.module.css'\r\n\r\n\r\nexport class ConnectedList extends Component {\r\n  render() {\r\n    return (\r\n      <div >\r\n        <h2 className={styles.titleBuscador}>Películas Favoritas</h2>\r\n        <ul className={styles.container}>\r\n          {this.props.movies.moviesFavourites.map(movie => \r\n          <li className={styles.movieItem}>\r\n\r\n            <span>{movie.title} </span>\r\n            <button className={styles.btn} onClick={() => this.props.removeMovieFavorite(movie.id)}>X</button> \r\n              \r\n          </li>)}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    movies: state\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    removeMovieFavorite: movie => dispatch(removeMovieFavorite(movie)),\r\n  };\r\n}\r\n\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(ConnectedList);\r\n\r\n","// La api que usamos es http://www.omdbapi.com/\r\n// Para obtener alguna película a partir de su ID pueden usar el endpoint:\r\n// http://www.omdbapi.com/?apikey=20dac387&i={idMovie}\r\n\r\n// otra para eliminarla de favoritas removeMovieFavorite.\r\nexport function removeMovieFavorite(payload) {\r\n    return { type: \"REMOVE_MOVIE_FAVORITE\", payload };\r\n}\r\n\r\n// otra para traer los detalles de la pelicula especifica getMovieDetail, \r\nexport function getMovieDetail(idMovie) {\r\n    return function(dispatch) {\r\n        return fetch(\"http://www.omdbapi.com/?apikey=20dac387&i=\" + idMovie)\r\n        .then(response => response.json())\r\n        .then(json => {\r\n            dispatch({ type: \"GET_MOVIE_DETAIL\", payload: json });\r\n        });\r\n    };\r\n}\r\n\r\n// a otra para agregarlas como Favoritas addMovieFavorite\r\nexport function addMovieFavorite(payload) {\r\n    return { type: \"ADD_MOVIE_FAVORITE\", payload };\r\n}\r\n\r\n// Una para hacer la request a la API y traer todas las peliculas getMovies,\r\nexport function getMovies(titulo) {\r\n    return function(dispatch) {\r\n        return fetch(\"http://www.omdbapi.com/?apikey=20dac387&s=\" + titulo)\r\n        .then(response => response.json())\r\n        .then(json => {\r\n            // console.log(\"json response\", json)\r\n            dispatch({ type: \"GET_MOVIES\", payload: json });\r\n        });\r\n    };\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link } from 'react-router-dom';\r\nimport './Buscador.css';\r\nimport {addMovieFavorite, getMovies} from '../../actions/index.js'\r\n\r\n\r\n\r\nexport class Buscador extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      title: \"\"\r\n    };\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.setState({ title: event.target.value });\r\n  }\r\n  \r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n    //agragar la accion getMovies pasandole el valor que guardamos en nuestro estado con el valor title en \r\n    //nuestra funcion handleSubmit para tener una referencia del valor ingresado en el input\r\n    this.props.getMovies(this.state.title)\r\n  }\r\n\r\n\r\n  render() {\r\n    console.log(this.props.movies)\r\n    const { title } = this.state;\r\n    return (\r\n      <div>\r\n        <h2 className=\"title-buscador\">Movie App</h2>\r\n        <form className=\"form-container\" onSubmit={(e) => this.handleSubmit(e)}>\r\n          <div>\r\n            <label className=\"label\" htmlFor=\"title\">Película: </label>\r\n            <input\r\n              className=\"inputMovie\"\r\n              type=\"text\"\r\n              id=\"title\"\r\n              autoComplete=\"off\"\r\n              value={title}\r\n              onChange={(e) => this.handleChange(e)}\r\n            />\r\n          <button className=\"btn\"  type=\"submit\">BUSCAR</button>\r\n          </div>\r\n        </form>\r\n        <ul className=\"ul-movies-container\">\r\n         {this.props.movies ? this.props.movies.map(movie => \r\n          <>\r\n            {this.props.favMovies.filter((fav) => fav.id === movie.imdbID).length \r\n              ? \"\" \r\n              : <li className=\"movie-item\">\r\n                  <img src={movie.Poster} alt=\"Poster\" />\r\n                  <Link to={`/movie/${movie.imdbID}`}>\r\n                    <span>{movie.Title}</span>\r\n                  </Link>\r\n                  <button className=\"btn\" onClick={() => this.props.addMovieFavorite({title: movie.Title, id: movie.imdbID}) }>Fav</button>\r\n                </li>\r\n            }\r\n              \r\n          </>) : \"\"\r\n          }\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    movies: state.moviesLoaded,\r\n    favMovies: state.moviesFavourites\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    addMovieFavorite: movie => dispatch(addMovieFavorite(movie)),\r\n    getMovies: title => dispatch(getMovies(title))\r\n  };\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Buscador);\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport Logo from '../../img/movie-icon.png'\r\nimport { IoFilmOutline } from \"react-icons/io5\";\r\n\r\n\r\n\r\nimport './Navbar.css';\r\n\r\nexport default function NavBar() {\r\n    return (\r\n        <header className=\"navbar\">\r\n            <div>\r\n                <NavLink exact to=\"/\"><IoFilmOutline className=\"icon-movie\"/></NavLink>\r\n            </div>\r\n            <nav>\r\n                <ul className=\"list\">\r\n                    <li className=\"list-item\">\r\n                        <NavLink exact to=\"/\" >Home</NavLink>\r\n                        <NavLink to=\"/favs\" >Favoritas</NavLink>\r\n                    </li>\r\n                </ul>\r\n            </nav>\r\n        </header>\r\n    )\r\n}","import React, {Component} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { getMovieDetail } from '../../actions/index';\r\nimport './Movie.css';\r\nimport { FcClapperboard } from \"react-icons/fc\";\r\nimport { FcShare } from \"react-icons/fc\";\r\nimport { AiFillFacebook } from \"react-icons/ai\";\r\nimport { FiTwitter } from \"react-icons/fi\";\r\nimport { BsListUl } from \"react-icons/bs\";\r\nimport { MdHighQuality } from \"react-icons/md\";\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// En nuestro componente Movie tenemos que usar ese parametro para usarlo en nuestra getMovieDetail function. \r\n// Podemos acceder a este valor gracias a las props que nos da react-router de la siguientes maneras:\r\n\r\n// manera convencional\r\n// const movieId = this.props.match.params.id;\r\n// this.props.getMovieDetail(movieId)\r\n\r\n\r\n\r\nclass Movie extends React.Component {\r\n\r\n    componentDidMount() {\r\n        const movieId = this.props.match.params.id;\r\n        this.props.getMovieDetail(movieId)\r\n    }\r\n\r\n    render() {\r\n        // console.log(this.props.movieDetail)\r\n        return (\r\n            <div className=\"container\">               \r\n                <h2 className=\"text\">Movie Details<BsListUl className=\"iconTitleStyling\"/></h2>     \r\n                <div className=\"container2\">\r\n                    <img src={this.props.movieDetail.Poster} className=\"imgBackgroung\" alt=\"\" />\r\n                    <section className=\"movieSection\">\r\n                        <h3>\r\n                            {this.props.movieDetail.Title} <FcClapperboard/><MdHighQuality style={{color:\"yellow\"}}/>\r\n                        </h3>\r\n                        <div className=\"iconsClass\">\r\n                            <FcShare/>\r\n                            <a href=\"#\"><span>Compartir</span></a>\r\n                            <AiFillFacebook className=\"icons\"/>\r\n                            <FiTwitter className=\"icons\"/>\r\n                        </div>\r\n                        <p>\r\n                            {this.props.movieDetail.Title}\r\n                        </p>\r\n                        <p>\r\n                            {this.props.movieDetail.Plot}\r\n                        </p>\r\n                        <div className=\"additinalInfo\">\r\n                            <p>Director: {this.props.movieDetail.Director}</p>\r\n                            <p>Genre: {this.props.movieDetail.Genre}</p>\r\n                            <p>Actors: {this.props.movieDetail.Actors}</p>\r\n                            <p>Awars: {this.props.movieDetail.Awars}</p>\r\n                        </div>\r\n                      \r\n                    </section>\r\n                </div>\r\n\r\n                <footer>\r\n                    <ul className=\"footerStyling\">\r\n                        <li>\r\n                            <p>Production: {this.props.movieDetail.Production}</p>  \r\n                        </li>\r\n                        <li>\r\n                            <p>Language: {this.props.movieDetail.Language}</p>\r\n                        </li>\r\n                    </ul>\r\n                </footer>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        movieDetail: state.movieDetail\r\n    };\r\n  }\r\n  \r\n  function mapDispatchToProps(dispatch) {\r\n    return {\r\n        getMovieDetail: movie => dispatch(getMovieDetail(movie)),\r\n    };\r\n  }\r\n\r\n\r\n\r\n  export default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n  )(Movie);","import React from \"react\";\r\n\r\nimport Favorites from \"./components/Favorites/Favorites\";\r\nimport Buscador from \"./components/Buscador/Buscador\";\r\nimport NavBar from \"./components/NavBar/NavBar\";\r\nimport { Route } from \"react-router-dom\";\r\nimport Movie from \"./components/Movie/Movie\";\r\n\r\nfunction App() {\r\n  return (\r\n      <React.Fragment>\r\n          <NavBar />\r\n          <Route exact path=\"/\" component={Buscador} />\r\n          <Route path=\"/favs\" component={Favorites} />\r\n          <Route path=\"/movie/:id\" component={Movie} />\r\n      </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const initialState = {\r\n    moviesFavourites: [],\r\n    moviesLoaded: [],\r\n    movieDetail: {}\r\n};\r\n\r\n\r\n// Tienes que crear los 4 reducers para las 4 acciones que creamos anteriormente que son:\r\n// getMovies, getMovieDetail, removeMovieFavorite,addMovieFavorite\r\nfunction rootReducer(state = initialState, action) {\r\n    if (action.type === \"ADD_MOVIE_FAVORITE\") {\r\n        return {\r\n            ...state,\r\n            moviesFavourites: state.moviesFavourites.concat(action.payload)\r\n        }\r\n    }\r\n\r\n    if (action.type === \"GET_MOVIES\") {\r\n        return {\r\n            ...state,\r\n            moviesLoaded: action.payload.Search\r\n        };\r\n    }\r\n\r\n    if (action.type === \"REMOVE_MOVIE_FAVORITE\") {\r\n        return {\r\n            ...state,\r\n            moviesFavourites: state.moviesFavourites.filter((movie) => movie.id !== action.payload)\r\n        };\r\n    }\r\n\r\n    if (action.type === \"GET_MOVIE_DETAIL\") {\r\n        // console.log(\"inside GET MOVIE DETAIL\", state.moviesLoaded)\r\n        return {\r\n            ...state,\r\n            movieDetail: action.payload\r\n        };\r\n    }\r\n\r\n\r\n    return state;\r\n}\r\n  \r\n\r\nexport default rootReducer;","import {applyMiddleware, compose } from \"redux\";\r\nimport rootReducer from \"../reducers/index\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nimport { createStore } from \"redux\";\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    applyMiddleware(thunk)\r\n  );\r\n  \r\n  export default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'react-redux';\r\nimport store from './store';\r\n\r\nimport { BrowserRouter } from 'react-router-dom';\r\n//import { Provider } from \"react-redux\";\r\n//import store from \"./store/index\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <BrowserRouter>\r\n      <App />\r\n    </BrowserRouter>\r\n   </Provider>,\r\n    \r\n   document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}